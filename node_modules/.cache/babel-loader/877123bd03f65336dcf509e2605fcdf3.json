{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'; // creating API handlers and managing API\n\nconst cryptoApiHeaders = {\n  'x-rapidapi-host': 'coinranking1.p.rapidapi.com',\n  'x-rapidapi-key': '99fbf52345msh33518343a11ef70p10679djsnf13218da7d62'\n};\nconst baseUrl = 'https://coinranking1.p.rapidapi.com';\n\nconst createRequest = url => ({\n  url,\n  headers: cryptoApiHeaders\n});\n\nexport const cryptoApi = createApi({\n  reducerPath: 'cryptoApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl\n  }),\n  endpoints: builder => ({\n    getCryptos: builder.query({\n      query: count => createRequest(`/coins?limit=${count}`)\n    }),\n    getCryptoDetails: builder.query({\n      query: coinId => createRequest(`/coin/${coinId}`)\n    }),\n    getCryptoHistory: builder.query({\n      query: _ref => {\n        let {\n          coinId,\n          timePeriod\n        } = _ref;\n        return createRequest(`/coin/${coinId}/history/${timePeriod}`);\n      }\n    }),\n    getCryptoHExchange: builder.query({\n      query: _ref2 => {\n        let {\n          exchanges,\n          id\n        } = _ref2;\n        return createRequest(`/exchanges`);\n      }\n    })\n  })\n});\nexport const {\n  useGetCryptosQuery,\n  useGetCryptoDetailsQuery,\n  useGetCryptoHistoryQuery,\n  useGetCryptoHExchangeQuery\n} = cryptoApi;","map":{"version":3,"sources":["/Users/wasif/Documents/Web Dev/crypto-app/src/services/cryptoApi.js"],"names":["createApi","fetchBaseQuery","cryptoApiHeaders","baseUrl","createRequest","url","headers","cryptoApi","reducerPath","baseQuery","endpoints","builder","getCryptos","query","count","getCryptoDetails","coinId","getCryptoHistory","timePeriod","getCryptoHExchange","exchanges","id","useGetCryptosQuery","useGetCryptoDetailsQuery","useGetCryptoHistoryQuery","useGetCryptoHExchangeQuery"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,cAAnB,QAAwC,8BAAxC,C,CAEA;;AAGA,MAAMC,gBAAgB,GAAG;AACrB,qBAAmB,6BADE;AAErB,oBAAkB;AAFG,CAAzB;AAKA,MAAMC,OAAO,GAAG,qCAAhB;;AACA,MAAMC,aAAa,GAAIC,GAAD,KAAU;AAC5BA,EAAAA,GAD4B;AACvBC,EAAAA,OAAO,EAAEJ;AADc,CAAV,CAAtB;;AAKA,OAAO,MAAMK,SAAS,GAAGP,SAAS,CAAC;AAC/BQ,EAAAA,WAAW,EAAE,WADkB;AAE/BC,EAAAA,SAAS,EAAER,cAAc,CAAC;AAACE,IAAAA;AAAD,GAAD,CAFM;AAG/BO,EAAAA,SAAS,EAAGC,OAAD,KAAc;AACrBC,IAAAA,UAAU,EAAED,OAAO,CAACE,KAAR,CAAc;AACtBA,MAAAA,KAAK,EAAGC,KAAD,IAAWV,aAAa,CAAE,gBAAeU,KAAM,EAAvB;AADT,KAAd,CADS;AAIrBC,IAAAA,gBAAgB,EAAEJ,OAAO,CAACE,KAAR,CAAc;AAC5BA,MAAAA,KAAK,EAAGG,MAAD,IAAYZ,aAAa,CAAE,SAAQY,MAAO,EAAjB;AADJ,KAAd,CAJG;AAOrBC,IAAAA,gBAAgB,EAAEN,OAAO,CAACE,KAAR,CAAc;AAC5BA,MAAAA,KAAK,EAAE;AAAA,YAAC;AAACG,UAAAA,MAAD;AAASE,UAAAA;AAAT,SAAD;AAAA,eAA0Bd,aAAa,CAAE,SAAQY,MAAO,YAAWE,UAAW,EAAvC,CAAvC;AAAA;AADqB,KAAd,CAPG;AAUrBC,IAAAA,kBAAkB,EAAER,OAAO,CAACE,KAAR,CAAc;AAC9BA,MAAAA,KAAK,EAAE;AAAA,YAAC;AAACO,UAAAA,SAAD;AAAYC,UAAAA;AAAZ,SAAD;AAAA,eAAqBjB,aAAa,CAAE,YAAF,CAAlC;AAAA;AADuB,KAAd;AAVC,GAAd;AAHoB,CAAD,CAA3B;AAmBP,OAAO,MAAM;AAACkB,EAAAA,kBAAD;AAAqBC,EAAAA,wBAArB;AAA+CC,EAAAA,wBAA/C;AAAyEC,EAAAA;AAAzE,IAAuGlB,SAA7G","sourcesContent":["import {createApi, fetchBaseQuery} from '@reduxjs/toolkit/query/react'\n\n// creating API handlers and managing API\n\n\nconst cryptoApiHeaders = {\n    'x-rapidapi-host': 'coinranking1.p.rapidapi.com',\n    'x-rapidapi-key': '99fbf52345msh33518343a11ef70p10679djsnf13218da7d62'\n} \n\nconst baseUrl = 'https://coinranking1.p.rapidapi.com';\nconst createRequest = (url) => ({\n    url, headers: cryptoApiHeaders\n})\n\n\nexport const cryptoApi = createApi({\n    reducerPath: 'cryptoApi',\n    baseQuery: fetchBaseQuery({baseUrl}),\n    endpoints: (builder) => ({\n        getCryptos: builder.query({\n            query: (count) => createRequest(`/coins?limit=${count}`)\n        }),\n        getCryptoDetails: builder.query({\n            query: (coinId) => createRequest(`/coin/${coinId}`)\n        }),\n        getCryptoHistory: builder.query({\n            query: ({coinId, timePeriod}) => createRequest(`/coin/${coinId}/history/${timePeriod}`)\n        }),\n        getCryptoHExchange: builder.query({\n            query: ({exchanges, id}) => createRequest(`/exchanges`)\n        })\n    })\n}); \n\nexport const {useGetCryptosQuery, useGetCryptoDetailsQuery, useGetCryptoHistoryQuery, useGetCryptoHExchangeQuery} = cryptoApi;\n\n"]},"metadata":{},"sourceType":"module"}