{"ast":null,"code":"var _jsxFileName = \"/Users/wasif/Documents/Web Dev/crypto-app/src/components/Cryptocurrencies.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport millify from 'millify';\nimport { Link } from 'react-router-dom';\nimport { Card, Row, Col, Input } from 'antd';\nimport { useGetCryptosQuery } from '../services/cryptoApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Cryptocurrencies = () => {\n  _s();\n\n  var _cryptosList$data;\n\n  const {\n    data: cryptosList,\n    isFetching\n  } = useGetCryptosQuery();\n  const [cryptos, setCryptos] = useState(cryptosList === null || cryptosList === void 0 ? void 0 : (_cryptosList$data = cryptosList.data) === null || _cryptosList$data === void 0 ? void 0 : _cryptosList$data.coins);\n  console.log(cryptos);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      gutters: [32, 32],\n      children: cryptos.map(currency => /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        s: 12,\n        lg: 6,\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/crypto/${currency.id}`,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            title: `${currency.rank}. ${currency.name}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 21\n        }, this)\n      }, currency.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Cryptocurrencies, \"41iBArBincfPpMaPnP89DPlMe+s=\", false, function () {\n  return [useGetCryptosQuery];\n});\n\n_c = Cryptocurrencies;\nexport default Cryptocurrencies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cryptocurrencies\");","map":{"version":3,"sources":["/Users/wasif/Documents/Web Dev/crypto-app/src/components/Cryptocurrencies.jsx"],"names":["React","useState","millify","Link","Card","Row","Col","Input","useGetCryptosQuery","Cryptocurrencies","data","cryptosList","isFetching","cryptos","setCryptos","coins","console","log","map","currency","id","rank","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,GAAnB,EAAwBC,KAAxB,QAAoC,MAApC;AACA,SAAQC,kBAAR,QAAiC,uBAAjC;;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAAA;;AAE/B,QAAM;AAACC,IAAAA,IAAI,EAAEC,WAAP;AAAoBC,IAAAA;AAApB,MAAkCJ,kBAAkB,EAA1D;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAACU,WAAD,aAACA,WAAD,4CAACA,WAAW,CAAED,IAAd,sDAAC,kBAAmBK,KAApB,CAAtC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACI,sBACI;AAAA,2BACA,QAAC,GAAD;AAAK,MAAA,OAAO,EAAE,CAAC,EAAD,EAAI,EAAJ,CAAd;AAAA,gBACKA,OAAO,CAACK,GAAR,CAAaC,QAAD,iBACT,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAa,QAAA,CAAC,EAAE,EAAhB;AAAoB,QAAA,EAAE,EAAE,CAAxB;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,EAAE,EAAG,WAAUA,QAAQ,CAACC,EAAG,EAAjC;AAAA,iCACI,QAAC,IAAD;AAAM,YAAA,KAAK,EAAG,GAAED,QAAQ,CAACE,IAAK,KAAIF,QAAQ,CAACG,IAAK;AAAhD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,SAAgCH,QAAQ,CAACC,EAAzC;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAgBH,CArBD;;GAAMX,gB;UAEkCD,kB;;;KAFlCC,gB;AAuBN,eAAeA,gBAAf","sourcesContent":["import React, {useState} from 'react'\nimport millify from 'millify'\nimport { Link } from 'react-router-dom'\nimport {Card, Row, Col, Input} from 'antd'\nimport {useGetCryptosQuery} from '../services/cryptoApi'\n\nconst Cryptocurrencies = () => {\n\nconst {data: cryptosList, isFetching} = useGetCryptosQuery();\nconst [cryptos, setCryptos] = useState(cryptosList?.data?.coins);\nconsole.log(cryptos);\n    return (\n        <>\n        <Row gutters={[32,32]}>\n            {cryptos.map((currency) => (\n                <Col xs={24} s={12} lg={6} key={currency.id}>\n                    <Link to={`/crypto/${currency.id}`}>\n                        <Card title={`${currency.rank}. ${currency.name}`}>\n\n                        </Card>\n                    </Link>\n                </Col>\n            ))}\n\n        </Row>\n        </>\n    )\n}\n\nexport default Cryptocurrencies\n"]},"metadata":{},"sourceType":"module"}